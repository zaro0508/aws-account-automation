#
# Taken From the AWS Suggested Template found at:
# https://s3-us-west-2.amazonaws.com/awscloudtrail/cloudwatch-alarms-for-cloudtrail-api-activity/CloudWatch_Alarms_for_CloudTrail_API_Activity.json
#

AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudTrail API Activity Alarm Template for CloudWatch Logs

Parameters:
  pLogGroupName:
    Type: String
    Default: CloudTrail/DefaultLogGroup
    Description: Enter CloudWatch Logs log group name. Default is CloudTrail/DefaultLogGroup

  pDashboardName:
    Type: String
    Description: Name of the Dashboard to create with the Alerts and Stuff
    Default: Security

  AccessDeniedThreshold:
    Type: Number
    Description: Number of AccessDenied or UnauthorizedOperation Events before alaming
    Default: 0

Conditions:
  AccessDenied: !Not [!Equals [ !Ref AccessDeniedThreshold, 0 ]]

# Each Resource consists of a Metric Filter and an Alarm on that Metric Filter
Resources:

  # Raw SNS Topics
  SNSAlertsInfo:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "Raw Info CloudWatch Alarms"
      Subscription:
      - Endpoint: !GetAtt [FormattingLambda, Arn]
        Protocol: lambda
      TopicName: !Sub "Info-Alerts-Raw-${AWS::StackName}"
  SNSAlertsError:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "Raw Error CloudWatch Alarms"
      Subscription:
      - Endpoint: !GetAtt [FormattingLambda, Arn]
        Protocol: lambda
      TopicName: !Sub "Error-Alerts-Raw-${AWS::StackName}"
  SNSAlertsCritical:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "Raw Critical CloudWatch Alarms"
      Subscription:
      - Endpoint: !GetAtt [FormattingLambda, Arn]
        Protocol: lambda
      TopicName: !Sub "Critical-Alerts-Raw-${AWS::StackName}"

  # Info level alert as these happen frequently
  SecurityGroupChangesMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref pLogGroupName
      FilterPattern: '{ ($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName
        = AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress)
        || ($.eventName = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup)
        || ($.eventName = DeleteSecurityGroup) }'
      MetricTransformations:
      - MetricNamespace: CloudTrailMetrics
        MetricName: SecurityGroupEventCount
        MetricValue: '1'
  SecurityGroupChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CloudTrailSecurityGroupChanges
      AlarmDescription: Alarms when an API call is made to create, update or delete a Security Group.
      AlarmActions:
      - Ref: SNSAlertsCritical
      MetricName: SecurityGroupEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
      TreatMissingData: notBreaching

  # Error Level Event, this should be infrequent
  NetworkAclChangesMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref pLogGroupName
      FilterPattern: '{ ($.eventName = CreateNetworkAcl) || ($.eventName = CreateNetworkAclEntry)
        || ($.eventName = DeleteNetworkAcl) || ($.eventName = DeleteNetworkAclEntry)
        || ($.eventName = ReplaceNetworkAclEntry) || ($.eventName = ReplaceNetworkAclAssociation)
        }'
      MetricTransformations:
      - MetricNamespace: CloudTrailMetrics
        MetricName: NetworkAclEventCount
        MetricValue: '1'
  NetworkAclChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CloudTrailNetworkAclChanges
      AlarmDescription: Alarms when an API call is made to create, update or delete a Network ACL.
      AlarmActions:
      - Ref: SNSAlertsCritical
      MetricName: NetworkAclEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
      TreatMissingData: notBreaching

  GatewayChangesMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref pLogGroupName
      FilterPattern: '{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway)
        || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway)
        || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway)
        }'
      MetricTransformations:
      - MetricNamespace: CloudTrailMetrics
        MetricName: GatewayEventCount
        MetricValue: '1'
  GatewayChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CloudTrailGatewayChanges
      AlarmDescription: Alarms when an API call is made to create, update or delete
        a Customer or Internet Gateway.
      AlarmActions:
      - Ref: SNSAlertsCritical
      MetricName: GatewayEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
      TreatMissingData: notBreaching

  VpcChangesMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref pLogGroupName
      FilterPattern: '{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) ||
        ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection)
        || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection)
        || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc)
        || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink)
        || ($.eventName = EnableVpcClassicLink) }'
      MetricTransformations:
      - MetricNamespace: CloudTrailMetrics
        MetricName: VpcEventCount
        MetricValue: '1'
  VpcChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CloudTrailVpcChanges
      AlarmDescription: Alarms when an API call is made to create, update or delete
        a VPC, VPC peering connection or VPC connection to classic.
      AlarmActions:
      - Ref: SNSAlertsCritical
      MetricName: VpcEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
      TreatMissingData: notBreaching

  EC2LargeInstanceChangesMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref pLogGroupName
      FilterPattern: '{ ($.eventName = RunInstances) && (($.requestParameters.instanceType
        = *.8xlarge) || ($.requestParameters.instanceType = *.4xlarge)) }'
      MetricTransformations:
      - MetricNamespace: CloudTrailMetrics
        MetricName: EC2LargeInstanceEventCount
        MetricValue: '1'
  EC2LargeInstanceChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CloudTrailEC2LargeInstanceChanges
      AlarmDescription: Alarms when an API call is made to create, terminate, start, stop or reboot a 4x or 8x-large EC2 instance.
      AlarmActions:
      - Ref: SNSAlertsCritical
      MetricName: EC2LargeInstanceEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
      TreatMissingData: notBreaching

  CloudTrailChangesMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref pLogGroupName
      FilterPattern: '{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail)
        || ($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName
        = StopLogging) }'
      MetricTransformations:
      - MetricNamespace: CloudTrailMetrics
        MetricName: CloudTrailEventCount
        MetricValue: '1'
  CloudTrailChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CloudTrailChanges
      AlarmDescription: Alarms when an API call is made to create, update or delete a CloudTrail trail, or to start or stop logging to a trail.
      AlarmActions:
      - Ref: SNSAlertsCritical
      MetricName: CloudTrailEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
      TreatMissingData: notBreaching

  AuthorizationFailuresMetricFilter:
    Type: AWS::Logs::MetricFilter
    Condition: AccessDenied
    Properties:
      LogGroupName: !Ref pLogGroupName
      FilterPattern: '{ ($.errorCode = "*UnauthorizedOperation") || ($.errorCode = "AccessDenied*") && $.userIdentity.invokedBy != "AWS Internal" }'
      MetricTransformations:
      - MetricNamespace: CloudTrailMetrics
        MetricName: AuthorizationFailureCount
        MetricValue: '1'
  AuthorizationFailuresAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: AccessDenied
    Properties:
      AlarmName: CloudTrailAuthorizationFailures
      AlarmDescription: Alarms when an unauthorized API call is made.
      AlarmActions:
      - Ref: SNSAlertsError
      MetricName: AuthorizationFailureCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: !Ref AccessDeniedThreshold
      TreatMissingData: notBreaching

  # Add KMS Key Deletion
  KMSScheduleKeyDeletionMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref pLogGroupName
      FilterPattern: '{$.eventName = "ScheduleKeyDeletion" }'
      MetricTransformations:
      - MetricNamespace: CloudTrailMetrics
        MetricName: KMSScheduleKeyDeletion
        MetricValue: '1'
  KMSScheduleKeyDeletionAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: KMSScheduleKeyDeletion
      AlarmDescription: Alarms when a KMS Key is scheduled for deletion.
      AlarmActions:
      - Ref: SNSAlertsError
      MetricName: KMSScheduleKeyDeletion
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
      TreatMissingData: notBreaching

  #
  # Formatting Lambda resources
  #

  FormattingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: CloudWatch
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action: ['cloudwatch:*']
            Effect: Allow
            Resource: '*'
      - PolicyName: logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: '*'
            Action: ['logs:*']
            Effect: Allow
      - PolicyName: SNSPublish
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: '*'
            Action: ['sns:publish']
            Effect: Allow

  FormattingLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Format Alarm messages to be readable
      Runtime: python2.7
      Handler: index.lambda_handler
      Timeout: '80'
      FunctionName: !Sub '${AWS::StackName}-FormattingLambda'
      Code:
        ZipFile: |
          # Lambda to send SNS Messages to Slack
          from __future__ import print_function

          import boto3
          import json
          import logging
          import os

          from base64 import b64decode
          from urllib2 import Request, urlopen, URLError, HTTPError

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              logger.info("Received event: " + json.dumps(event, sort_keys=True))
              sns = event['Records'][0]['Sns']
              alarm = json.loads(event['Records'][0]['Sns']['Message'])

              # logger.info(json.dumps(alarm, sort_keys=True, default=str, indent=2))
              message = "{} went into {} at {} for account {}\n{}\n{}".format(alarm['AlarmName'],
                        alarm['NewStateValue'], alarm['StateChangeTime'], alarm['AWSAccountId'], alarm['NewStateReason'], alarm['AlarmDescription'])
              # print(message)

              sent_to_arn = sns['TopicArn']
              level = sent_to_arn.split(':')[-1].split("-")[0]
              # print("Level " + level)

              subject = "ALARM {}".format(alarm['AlarmName'])

              client = boto3.client('sns')
              client.publish(
                TopicArn=os.environ[level],
                Message=message,
                Subject=subject
            )

      Role: !GetAtt [FormattingLambdaRole, Arn]
      Environment:
        Variables:
          Critical: !ImportValue SNSAlertsCriticalArn
          Error: !ImportValue SNSAlertsErrorArn
          Info: !ImportValue SNSAlertsInfoArn

  FormattingLambdaInvocationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: [events.amazonaws.com, sns.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ExecuteSlackLambda
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action: ['lambda:InvokeFunction']
            Effect: Allow
            Resource:
            - !GetAtt [FormattingLambda, Arn]
  FormattingLambdaPermissionSNSAlertsCritical:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt [FormattingLambda, Arn]
      Principal: sns.amazonaws.com
      SourceArn: !Ref 'SNSAlertsCritical'
      Action: lambda:invokeFunction
  FormattingLambdaPermissionSNSAlertsInfo:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt [FormattingLambda, Arn]
      Principal: sns.amazonaws.com
      SourceArn: !Ref 'SNSAlertsInfo'
      Action: lambda:invokeFunction
  FormattingLambdaPermissionSNSAlertsError:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt [FormattingLambda, Arn]
      Principal: sns.amazonaws.com
      SourceArn: !Ref 'SNSAlertsError'
      Action: lambda:invokeFunction


Outputs:
  TemplateVersion:
    Value: "0.2.4"
  SNSAlertsCritical:
    Value: !Ref 'SNSAlertsCritical'
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-CloudWatchAlarmRawTopic-Critical'
  SNSAlertsError:
    Value: !Ref 'SNSAlertsError'
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-CloudWatchAlarmRawTopic-Error'
  SNSAlertsInfo:
    Value: !Ref 'SNSAlertsInfo'
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-CloudWatchAlarmRawTopic-Info'